// Mocks generated by Mockito 5.4.4 from annotations
// in taski/test/data/datasource/task_database_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:taski/data/datasources/local/task_database.dart' as _i3;
import 'package:taski/data/models/task_model.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDatabase extends _i1.Mock implements _i3.TaskDatabase {
  MockTaskDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<List<_i5.TaskModel>> searchTasks(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTasks,
          [query],
        ),
        returnValue: _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
      ) as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<List<_i5.TaskModel>> getTasks(
    int? limit,
    int? offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
      ) as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<List<_i5.TaskModel>> getCompletedTasks({
    int? limit = 10,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedTasks,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
      ) as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<void> insertTask(_i5.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #insertTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i5.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> getTotalTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTotalTasks,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> clearTasks() => (super.noSuchMethod(
        Invocation.method(
          #clearTasks,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
